Parameters:
  Name:
    Type: String
    Default: ''

Resources:

  TestBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - TopicPolicy
      - QueuePolicy
      - LambdaS3Permission
    Properties:
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref Topic
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .topic
                  - Name: prefix
                    Value: topic/
        QueueConfigurations:
          - Queue: !GetAtt Queue.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .queue
                  - Name: prefix
                    Value: queue/
        LambdaConfigurations:
          - Function: !GetAtt Lambda.Arn
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .lambda
                  - Name: prefix
                    Value: lambda/

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt Queue.Arn
          Protocol: sqs
        - Endpoint: !GetAtt Lambda.Arn
          Protocol: lambda

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: [!Ref Topic]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref Topic
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-*

  Queue:
    Type: AWS::SQS::Queue

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref Queue]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:s3:::${AWS::StackName}-*
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-*

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
            print(json.dumps(event))
      Runtime: python3.6

  LambdaS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: sns.amazonaws.com
      SourceArn: !Ref Topic

Outputs: {}
